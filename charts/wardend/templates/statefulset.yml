---
{{- if .Values.node.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-{{ .Values.node.name }}
  labels:
    {{- include "node.labels" . | nindent 4 }}
spec:
  {{- if not .Values.persistentVolumeClaimName }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "node.name" . }}-data
      spec:
        accessModes: [ReadWriteOnce]
        {{- with .Values.node.persistent.class }}
        storageClassName: "{{ . }}"
        {{- end}}
        resources:
          requests:
            storage: {{.Values.node.persistent.size}}
  {{- end }}
  replicas: {{ .Values.node.replicaCount }}
  selector:
    matchLabels:
       {{- include "node.selectorLabels" . | nindent 8 }}
  template:
    metadata:
      labels:
        {{- with .Values.podAnnotations }}
        annotations:
            {{- toYaml . | nindent 8 }}
        {{- end }}
        labels:
            {{- include "node.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }} 
      {{- end}}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      initContainers:
        - name: init
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: [ "/bin/bash" , "/scripts/init.sh" ]
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: SYNC_METHOD
              value: "{{.Values.syncMethod }}"
            - name: SNAPSHOT_URL
              value: "{{.Values.snapshot.url }}"
            - name: WARDEND_HOME
              value: "{{ .Values.node.home }}"
            {{- if .Values.scratch.genesisUrl }}
            - name: GENESIS_URL
              value: "{{ .Values.scratch.genesisUrl }}"
            {{- end}}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
              readOnly: true
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home}}
        {{- if .Values.cosmovisor.enabled }}
        - name: init-cosmovisor
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: [ "/bin/bash" , "/scripts/init-cosmovisor.sh" ]
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: COSMOVISOR_VERSION
              value: "{{ .Values.cosmovisor.version }}"
            - name: WARDEND_HOME
              value: "{{ .Values.node.home }}"
          volumeMounts:
            - name: scripts-cosmovisor
              mountPath: /scripts
              readOnly: true
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home }}
        {{- end }}
        {{- if .Values.node.mnemonicSecretName }}
        - name: init-keys
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: ["/bin/sh", "-c"]
          args: 
            - |
              #!/bin/bash
              keys=$(wardend keys list --keyring-backend test | grep validator)
              if [ -z "$keys" ]; then
                cat /tmp/mnemonic/MNEMONIC | wardend keys add validator --recover --keyring-backend test
              else
                echo "Validator key already in place, not adding it"
              fi
          volumeMounts:
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{.Values.node.home}}
            - name: {{ include "node.name" . }}-mnemonic
              mountPath: /tmp/mnemonic
        {{- end}}
      containers:
        - name: {{ include "node.name" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.cosmovisor.enabled }}
          command: ["{{.Values.node.home}}/cosmovisor/bin/cosmovisor","run","start"]
          {{- else }}
          {{- if .Values.node.ready }}
          command: ["/usr/bin/wardend","start"]
          {{- else }}
          command: ["sleep","36000"]
          {{- end }}
          {{- end }}
          env:
            - name: WARDEND_HOME
              value: {{ .Values.node.home }}
          {{- if .Values.cosmovisor.enabled }}
            - name: DAEMON_NAME
              value: "wardend"
            - name: DAEMON_HOME
              value: {{ .Values.node.home }}
            - name: DAEMON_RESTART_AFTER_UPGRADE
              value: "{{ .Values.cosmovisor.restartAfterUpgrade }}"
            - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
              value: "{{ .Values.cosmovisor.allowDownloadBinaries }}"
            - name: DAEMON_LOG_BUFFER_SIZE
              value: "{{ .Values.cosmovisor.logBufferSize }}"
            - name: UNSAFE_SKIP_BACKUP
              value: "{{ .Values.cosmovisor.unsafeSkipBackup }}"
          {{- end }}
          ports:
            {{- if .Values.node.rpc.enabled }}
            - name: rpc
              containerPort: 26657
              protocol: TCP
            {{- end}}
            {{- if .Values.node.p2p.enabled }}
            - name: p2p
              containerPort: 26656
              protocol: TCP
            {{- end}}
            {{- if .Values.node.api.enabled }}
            - name: api
              containerPort: 1317
              protocol: TCP
            {{- end}}
            {{- if .Values.node.grpc.enabled }}
            - name: grpc
              containerPort: 9090
              protocol: TCP
            {{- end}}
            {{- if .Values.node.metrics.enabled }}
            - name: telemetry
              containerPort: 26660
              protocol: TCP
            {{- end}}
          {{- if .Values.node.ready }}
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /health
              port: rpc
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /health
              port: rpc
          {{- end }}
          volumeMounts:
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home }}
            - name: config
              mountPath: {{ .Values.node.home }}/config/config.toml
              subPath: config.toml
            - name: config
              mountPath: {{ .Values.node.home }}/config/app.toml
              subPath: app.toml
          {{- if .Values.node.nodeKeysSecretName }}
            - name: {{ include "node.name" . }}-keys
              mountPath: {{ .Values.node.home }}/config/node_key.json
              subPath: node_key.json
          {{- end}}
          {{- if .Values.node.nodeKeysSecretName }}
            - name: {{ include "node.name" . }}-keys
              mountPath: {{ .Values.node.home }}/config/priv_validator_key.json
              subPath: priv_validator_key.json
          {{- end}}
          {{- if .Values.node.genesisSecretName }}
            - name: genesis
              mountPath: {{ .Values.node.home }}/config/genesis.json
              subPath: genesis.json
          {{- end}}
          {{- end}}
          resources:
            {{- toYaml .Values.node.resources | nindent 12 }}
      volumes:
      {{- if .Values.persistentVolumeClaimName }}
      - name: {{ .Values.persistentVolumeClaimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistentVolumeClaimName }}
      {{- end }}
      - name: scripts
        configMap:
          name: {{.Release.Name}}-{{ .Values.node.name }}-scripts
      {{- if .Values.cosmovisor.enabled }}
      - name: scripts-cosmovisor
        configMap:
          name: {{ .Release.Name }}-{{ .Values.node.name }}-cosmovisor-init
      {{- end }}
      - name: config
        configMap:
          name: {{ .Release.Name }}-{{ .Values.node.name }}-config
      {{- if .Values.node.nodeKeysSecretName }}
      - name: {{ include "node.name" . }}-keys
        secret:
          secretName: {{.Values.node.nodeKeysSecretName}}
      {{- end}}
      {{- if .Values.node.mnemonicSecretName }}
      - name: {{ include "node.name" . }}-mnemonic
        secret:
          secretName: {{.Values.node.mnemonicSecretName }}
      {{- end}}
      {{- if .Values.node.genesisSecretName }}
      - name: genesis
        secret:
          secretName: {{ .Values.node.genesisSecretName }}
      {{- end}}
